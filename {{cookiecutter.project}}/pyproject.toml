[tool.poetry]
name = "{{cookiecutter.project}}"
version = "0.0.1"
description = "{{cookiecutter.app_description}}"
authors = [
    "e183b796621afbf902067460 <606d18446a06fe9738fd@gmail.com>"
]

[tool.poetry.dependencies]
python = "~=3.10"
attrs = "~=23.1.0"
python-dotenv = "~=1.0.0"
uvicorn = "~=0.23.1"
fastapi = "~=0.100.1"
pydantic = "~=2.1.1"
pydantic-settings = "~=2.0.2"
python-multipart = "~=0.0.6"
requests = "~=2.31.0"
httpx = "~=0.24.1"
aiokafka = "~=0.8.1"
fastkafka = "~=0.8.0"

[tool.poetry.group.linters.dependencies]
black = "~=23.7.0"
Flake8-pyproject = "~=1.2.3"
isort = "~=5.12.0"
pylint = "~=2.17.5"
flake8-boolean-trap = "~=1.0.1"
flake8-print = "~=5.0.0"
wemake-python-styleguide = "~=0.18.0"

[tool.poetry.group.typing.dependencies]
mypy = "~=1.5.1"

[tool.poetry.group.test.dependencies]
pytest = "~=7.4.0"
pytest-mock = "~=3.11.1"

[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120
exclude = [".git", "__pycache__"]
max-call-level=5
max-annotation-complexity=4
max-line-complexity=15
# WPS: codes from wemake-python-styleguide. Code descriptions https://wemake-python-styleguide.readthedocs.io/en/latest/pages/usage/violations/index.html
select = [
    "B","C", "D9", "E","F", "S", "W", "T2", "T4", "B9", "FBT", "E800",
    # Naming
    "WPS100", "WPS101", "WPS102", "WPS111", "WPS113", "WPS114", "WPS116", "WPS117", "WPS119", "WPS120", "WPS121", "WPS122", "WPS123", "WPS124",
    # Complexity
    "WPS204", "WPS213", "WPS215", "WPS216", "WPS219", "WPS220", "WPS221", "WPS222", "WPS223", "WPS224", "WPS227", "WPS228", "WPS231", "WPS234", "WPS238",
    # Consistency
    "WPS300", "WPS302", "WPS304", "WPS307", "WPS308", "WPS309", "WPS311", "WPS313", "WPS314", "WPS322", "WPS324", "WPS325", "WPS327", "WPS328", "WPS329", "WPS330", "WPS333", "WPS334", "WPS335", "WPS337", "WPS347", "WPS349", "WPS350", "WPS351", "WPS356", "WPS357", "WPS359", "WPS360",
    # Best practices
    "WPS400", "WPS407", "WPS409", "WPS411", "WPS412", "WPS413", "WPS414", "WPS415", "WPS417", "WPS418", "WPS419", "WPS420", "WPS422", "WPS423", "WPS424", "WPS425", "WPS426", "WPS428", "WPS429", "WPS430", "WPS431", "WPS432", "WPS433", "WPS435", "WPS436", "WPS439", "WPS440", "WPS441", "WPS443", "WPS447", "WPS449", "WPS450", "WPS452", "WPS455", "WPS457", "WPS458", "WPS462", "WPS463", "WPS465", "WPS466", "WPS467", "WPS468", "WPS469", "WPS470", "WPS471", "WPS472",
    # Refactoring
    "WPS500", "WPS503", "WPS504", "WPS505", "WPS506", "WPS507", "WPS508", "WPS509", "WPS510", "WPS511", "WPS512", "WPS513", "WPS514", "WPS515", "WPS516", "WPS517", "WPS518", "WPS519", "WPS520", "WPS521", "WPS522", "WPS523", "WPS524", "WPS525", "WPS528", "WPS529", "WPS530", "WPS531", "WPS532",
    # OOP
    "WPS603", "WPS604", "WPS605", "WPS606", "WPS607", "WPS608", "WPS609", "WPS610", "WPS611", "WPS612", "WPS614"
]
ignore = ["W503", "C8", "B001", "B008", "B950", "WPS", "DAR", "N400", "T100", "I", "Q", "RST", "FMT", "N8", "P1", "P3"]

[tool.isort]
line_length = 120
multi_line_output = 3
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
include_trailing_comma = true

[tool.mypy]
python_version = 3.10
incremental = true
strict = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_decorators = true
disallow_any_generics = false
no_implicit_optional = true
warn_unreachable = true
warn_return_any = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pylint]
    [tool.pylint.master]
    persistent = ['yes']
    unsafe-load-any-extension=['no']
    max-complexity = 7
    max-try-statements = 4
    suggestion-mode = ['yes']
    load-plugins = [
        "pylint.extensions.mccabe",
        "pylint.extensions.bad_builtin",
        "pylint.extensions.check_elif",
        "pylint.extensions.broad_try_clause",
        "pylint.extensions.redefined_variable_type",
        "pylint.extensions.overlapping_exceptions",
        "pylint.extensions.comparetozero",
        "pylint.extensions.emptystring"
    ]

    [tool.pylint.messages_control]
    disable = [
        "logging-fstring-interpolation",
        "import-error",
        "no-name-in-module",
        "missing-module-docstring",
        "missing-class-docstring",
        "missing-function-docstring",
        "too-few-public-methods",
        "fixme"
    ]

    enable = 'c-extension-no-member'

    [tool.pylint.reports]
    evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
    output-format = 'parseable'
    reports = 'no'
    score = 'yes'

    [tool.pylint.refactoring]
    max-nested-blocks = 5
    never-returning-functions = ['optparse.Values','sys.exit']

    [tool.pylint.logging]
    logging-modules = 'logging'
    logging-format-style = 'new'

    [tool.pylint.spelling]
    max-spelling-suggestions = 4
    spelling-store-unknown-words = 'no'

    [tool.pylint.miscellaneous]
    notes = ['FIXME,TODO']

    [tool.pylint.typecheck]
    contextmanager-decorators = ['contextlib.contextmanager']
    ignore-mixin-members = 'yes'
    ignore-on-opaque-inference = 'yes'
    ignored-classes = 'optparse.Values,thread._local,_thread._local'
    ignored-modules = 'asyncio'
    missing-member-hint = 'yes'
    missing-member-hint-distance = 1
    missing-member-max-choices = 1
    allow-global-unused-variables = 'yes'
    callbacks = ['cb_', '_cb']
    dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
    ignored-argument-names = '_.*|^ignored_|^unused_'
    init-import = 'no'
    redefining-builtins-modules = ['six.moves', 'past.builtins', 'future.builtins', 'io']

    [tool.pylint.format]
    ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
    indent-after-paren = 4
    max-line-length=120
    max-module-lines=500
    single-line-class-stmt = 'no'
    single-line-if-stmt = 'no'

    [tool.pylint.similarities]
    ignore-comments = 'yes'
    ignore-docstrings = 'yes'
    ignore-imports = 'no'
    ignore-signatures = 'yes'
    min-similarity-lines = 4

    [tool.pylint.basic]
    argument-naming-style = 'snake_case'
    attr-naming-style = 'snake_case'
    bad-names=['foo', 'bar', 'baz', 'toto', 'tutu', 'tata', 'v', 'f', 'x', 'y', 'n', 'e', 'ex', 'k', 'r', 'c']
    class-attribute-naming-style = 'any'
    class-naming-style = 'PascalCase'
    const-naming-style = 'UPPER_CASE'
    docstring-min-length = -1
    function-naming-style = 'snake_case'
    good-names=['i', 'j', 'Run', '_', 'ts', 'db', 'env', 'ls', 'mv', 'rm']
    include-naming-hint = 'yes'
    inlinevar-naming-style = 'any'
    method-naming-style = 'snake_case'
    module-naming-style = 'snake_case'
    no-docstring-rgx = '^_'
    property-classes = 'abc.abstractproperty'
    variable-naming-style = 'snake_case'

    [tool.pylint.imports]
    allow-wildcard-with-all = 'no'
    analyse-fallback-blocks = 'no'
    deprecated-modules = ['optparse', 'tkinter.tix']
    known-third-party = 'enchant'

    [tool.pylint.classes]
    defining-attr-methods = ['__init__', '__new__', 'setUp', '__post_init__', '__attrs_post_init__']
    exclude-protected = ['_asdict', '_fields', '_replace', '_source', '_make']
    valid-classmethod-first-arg = 'cls'
    valid-metaclass-classmethod-first-arg = 'mcs'

    [tool.pylint.design]
    max-args=5
    max-attributes=10
    max-bool-expr=5
    max-branches=12
    max-locals=10
    max-parents=4
    max-public-methods=12
    max-returns=5
    max-statements=30
    min-public-methods=2

    [tool.pylint.exceptions]
    overgeneral-exceptions = ['builtins.BaseException', 'builtins.Exception']
